{
  "name": "rackit",
  "description": "Super simple Rackspace Cloud Files client",
  "keywords": [
    "api",
    "storage",
    "rackspace",
    "cloud",
    "cloudfiles"
  ],
  "version": "0.1.0",
  "author": {
    "name": "Ross Johnson",
    "email": "ross@mazira.com"
  },
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "http://github.com/rossj/rackit"
  },
  "main": "./lib/main.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">= 0.5.x"
  },
  "dependencies": {
    "request": ">= 2.9.100",
    "async": ">= 0.1.18",
    "mime": ">= 0.2.0"
  },
  "devDependencies": {
    "mocha": "1.5.0",
    "should": "1.2.0",
    "nock": "0.13.4"
  },
  "readme": "# Rackit\n\nRackit is a module for managing large collections of files on Rackspace Cloud Files. Rackit automatically creates containers as needed, and reauthenticates when the API token expires. Rackit also supports the generation of temporary, time-limited file URLs.\n\nCloud Files has a recommended limit of 50,000 files per container. Rackit knows this, and will automatically create new containers as necessary.\n\nWith Rackit, you specify a container prefix, such as 'file'. Then, Rackit will create containers ['file0', 'file1', ...] as necessary. Files can be uploded by passing local paths or readable streams.\n\n# Install\n\n    $ npm install rackit\n\n# Usage\n`````javascript\nvar rackit = require('rackit');\n    \n// Initialize with your account information\nrackit.init({\n\t'user' : '<your Rackspace username>',\n\t'key' : '<your Rackspace API key>'\n}, function(err) {\n\t// Add a local file to the cloud\n\trackit.add(__dirname + '/image.jpg', function(err, cloudpath) {\n\t\t// Get the CDN URI of the file\n\t\tconsole.log(rackit.getURI(cloudpath));\n\n\t\t// The cloudpath parameter uniquely identifies this file, and is used by other Rackit methods to manipulate it.\n\t\t// We should probably store the cloudpath somewhere.\n\t});\n});\n`````\n\nOptionally, you may create your own Rackit instance. This is necessary if you are accessing multiple Cloud File accounts.\n`````javascript\nvar Rackit = require('rackit').Rackit;\nvar myRackit = new Rackit({\n\t'user' : '<your Rackspace username>',\n\t'key' : '<your Rackspace API key>'\n});\n\nmyRackit.init(function(err) {\n\t// Add a local file to the cloud\n\tmyRackit.add(__dirname + '/image.jpg', function(err, cloudpath) {\n\t\t// Get the CDN URI of the file\n\t\tconsole.log(myRackit.getURI(cloudpath));\n\t});\n});\n`````\n\n# Options\n\nWhen initializing Rackit, here are the options and defaults:\n`````javascript\n{\n\tuser : '', // Your Rackspace username\n\tkey : '', // Your Rackspace API key\n\tprefix : 'dev', // The prefix for your Cloud Files containers (may contain forward slash)\n\tregion : 'US', // Determines the API entry point - other option of 'UK'\n\ttempURLKey : null, // A secret for generating temporary URLs\n\tuseSNET : false,\n\tuseCDN : true,\n\tuseSSL : true, // Specifies whether to use SSL (https) for CDN links\n\tverbose : false, // If set to true, log messages will be generated\n\tlogger : console.log // Function to receive log messages\n}\n`````\n        \n# Methods\n### #add(source, [options,] callback)\n- source - Either a path to the local file to upload, or a readable stream.\n- options - A hash of additional options\n  - type - A MIME type (e.g. 'Image/JPEG'). If not specified, mime-magic is used for local files, and the Content-Type header is checked for ServerRequest streams.\n  - filename - What to name the file on Cloud Files. Omit to have Rackit generate a UID.\n  - meta - A hash of additional metadata to store along with the file (prefixed with 'X-Object-Meta-' automatically).\n  - headers - A hash of additional headers to send.\n- callback(err, cloudpath) - returns information about the location of the file. `cloudpath` is in the form 'container/file-name' and is used as input to other methods to uniquely identify a file. I recommend storing the `cloudpath` in your database, although you could also store a CDN url.\n\nUploads a file to the cloud. The uploaded file will be given a random 24-character file name, unless specified.\n\nHere is an example of passing a stream to Rackit:\n`````javascript\nvar http = require('http');\nhttp.get('http://nodejs.org/images/logo.png', function(res) {\n\t// We have receieved request headers, but no data yet. Send the stream to Rackit!\n\trackit.add(res, function(err, cloudpath) {\n\t\tif (err) return;\n\t\tconsole.log('file added!');\n\t\tconsole.log('see it here:', rackit.getURI(cloudpath));\n\t}\n});\n`````\n\n### #list(callback)\n- callback(err, cloudpaths)\n\nReturns an array of all uploaded objects in prefixed containers.\n\n### #get(cloudpath, [localPath], [callback])\n- cloudpath - of the form 'container/file-name'\n- localPath - where to put the downloaded file\n- callback(err, response, body)\n- returns a readable stream\n\nDownloads a file from the cloud. Returns a readable stream, or can write directly to a file.\n\n### #remove(cloudpath, callback)\n\nPermanently deletes a file from the cloud.\n\n### #setMeta(cloudpath, meta, callback)\n\nUpserts the metadata for the specified cloud file.\n\n### #getMeta(cloudpath, callback)\n- cloudpath - of the form 'container/file-name'\n- callback(err, meta)\n\nRetrieves the metadata for the specified cloud file. An error will be returned if the file does not exist.\n\n### #getURI(cloudpath [, ttl])\n\nReturns a URI for a given file. If the ttl parameter is omitted, then a CDN URI will be returned (if the container is CDN enabled). If ttl is specified, a temporary URI will be given which is valid for ttl seconds.\n\n### #getCloudpath(uri)\n\nOpposite of getURI. Returns a Cloudpath string given a file's CDN or temporary URI. The Cloudpath can then be used as input to other Rackit methods.\n\n# TODO\n\n* Add periodic updating of cached container info, in case things are modified externally\n* Add ability to specify container size limit\n* Finish writing test cases\n\n# LICENSE\n(The MIT License)\n\nCopyright (C) 2012 Ross Johnson (ross@mazira.com)\n\nCopyright (C) 2012 Mazira, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "rackit@0.1.0",
  "dist": {
    "shasum": "e3edd044c3d56e8ff5e5a1f50745a98d7eeeb857"
  },
  "_from": "rackit@0.1.0",
  "_resolved": "https://registry.npmjs.org/rackit/-/rackit-0.1.0.tgz"
}
